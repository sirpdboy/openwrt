#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: lede

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择仓库的分支：'
        default: 'master'
        required: true
        type: choice
        options: [ openwrt-21.02, master, stable,  openwrt-23.05 ]
      config_s:
        description: '配置文件'
        default: 'Vip-Super'
        required: true
        type: choice
        options: [ Vip-Super, Free-Mini, Vip-Mini ]
  
      cpu_s:
        description: 'CPU优选'
        required: true
        default: '8'
        type: choice
        options:
          - '8'
          - '8370C'
          - '8272CL'
          - '8171M'
          
      target:
        description: '选择要生成的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64 ]

      date_s:
        description: '固件日期'
        default: 'default'
        required: false

env:
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy.sh
  APT: apt
  UPLOAD_BIN_DIR: false
  UPLOAD_IPK_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    name: lede-${{github.event.inputs.config_s}}-${{github.event.inputs.target}}-${{github.event.inputs.branch}}-${{github.event.inputs.date_s}}
    env:
      CONFIG_S: ${{github.event.inputs.config_s}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: install Go 1.21.1
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'
    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        df -Th
        cpu_name=$(cat /proc/cpuinfo | grep "model name" | head -n 1 | awk -F: '{print $2}' | sed 's/^[ \t]*//')
        if [[ "$cpu_name" =~ "8370C" || "$cpu_name" =~ "7763" ]]; then
          ulimit -a
        fi
    - name: Set release env
      run: |
        echo WORKDIR="/builder" >> "$GITHUB_ENV"
    - name: Free disk space
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo bash -c "curl -s https://us.cooluc.com/ubuntu-apt/sources-22.04.list > /etc/apt/sources.list"
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th
    - name: Create VG & LV
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
    - name: Mount LV
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        # sudo chown $USER:$GROUPS /builder
    - name: Build System Setup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo sh -c 'echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
        sudo sh -c 'echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison clang-17 cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -Th
          sudo timedatectl set-timezone "$TZ"
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    - name: Clone source code
      working-directory: /builder
      run: |
        df -hT $PWD
        git clone --depth 1 https://github.com/coolsnowwolf/lede -b master  openwrt
        git clone --depth 1 ${{ secrets.LEDEURL }} -b master lede
        
        cp -Rf ./lede/* ./openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
       ccache: 'true'
       mixkey: 'x86_64'
       clean:  'false'  # 'false'
       prefix: /builder/openwrt
    - name: Update feeds
      run: | 
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
    - name: Update package
      run: |
         [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
         cd openwrt
         
         chmod +x ./${DIY_P1_SH}
         ./$DIY_P1_SH
         chmod -R 755 .
    - name: defconfig
      run: |
        cd openwrt
        cat  ./seed/${CONFIG_S} > .config
        case "${CONFIG_S}" in
        "Vip"*)        
        cat  ./seed/comm  >>  .config
        ;;
        esac
        make defconfig 
    - name: Download package
      run: |
        cd openwrt
        make download -j50
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile Packages
      id: compileopenwrt
      run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         # make -j$(nproc)  || make -j1 V=s
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         bash  bakkmod.sh
         
         [ -d files/etc/opkg ] || mkdir -p files/etc/opkg
         [ -f files/etc/opkg/distfeeds.conf ] || curl -fsSL  https://raw.githubusercontent.com/sirpdboy/other/master/patch/distfeeds.conf > ./files/etc/opkg/distfeeds.conf
         echo "status=success" >> $GITHUB_OUTPUT
    - name: Generate Firmware
      id: compile
      if: steps.compileopenwrt.outputs.status  == 'success' && !cancelled()
      run: |
         df -h
         cd openwrt 
         rm -rf ./dl
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
         make checksum
         bash buildmd5.sh
         echo "status=success" >> $GITHUB_OUTPUT
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status  == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        ls -a
        rm -rf packages
        df -h
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status  == 'success' && !cancelled()
      run: |
        echo "release_tag=$(cat openwrt/package/base-files/files/etc/ezopenwrt_version  | cut -d _ -f 1)" >> $GITHUB_OUTPUT
        echo "TAG=$(cat openwrt/package/base-files/files/etc/ezopenwrt_version  | cut -d _ -f 1)" >>$GITHUB_ENV
        echo -e "\n* The stable source code has been updated." >> release.txt
        sed -i '1i ## Firmware Update Log' release.txt
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success'  && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        name: ${{ env.TAG }}-EzOpWrt-${{ env.TARGET_DEVICE }}-${{ env.REPO_BRANCH }}-Firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload IPK directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_IPK_DIR == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.TAG }}-EzOpWrt-${{ env.TARGET_DEVICE }}-${{ env.REPO_BRANCH }}-ipk
        path: ./openwrt/bin/packages/
 
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.TAG }}-EzOpWrt-${{ env.TARGET_DEVICE }}-${{ env.REPO_BRANCH }}-bin
        path: ./openwrt/bin/

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*


    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
          retain_days: 1
          keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
          keep_latest: 3
          keep_min_download_counts: 1 # Optional parameters
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
